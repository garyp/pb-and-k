name: Publish release

env:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process'
  JAVA_VERSION: 11
  NODEJS_VERSION: 14
  PROTOBUF_CONFORMANCE_VERSION: 3.10.1
  SONATYPE_BASE_URL: 'https://s01.oss.sonatype.org/service/local/'
  SONATYPE_STAGING_PROFILE_ID: 'ad18f49c95e39'

on:
  push:
    branches:
      - master
      - v[0-9]+.[0-9]+.x
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-*
    paths-ignore:
      - '*.md'

# All jobs, except create-staging-repository, publish, and finalize-staging-repository, need to be kept in sync
# with their counterparts in pull-request.yaml
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            os-type: linux
          - os: macos-10.15
            os-type: macos
      fail-fast: false
    name: Build (${{ matrix.os-type }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build project and run tests
        run: |
          if [ "${{ matrix.os-type }}" == "linux" ]; then
            ./gradlew build --stacktrace
          else
            ./gradlew compileKotlinIosArm64 \
                    compileKotlinIosX64 \
                    compileKotlinMacosArm64 \
                    compileKotlinMacosX64 \
                    compileTestKotlinIosArm64 \
                    compileTestKotlinIosX64 \
                    compileTestKotlinMacosArm64 \
                    compileTestKotlinMacosX64 \
                    iosX64Test \
                    macosX64Test \
                    --stacktrace
          fi

      - name: Ensure bundled types are up-to-date
        if: matrix.os-type == 'linux'
        run: |
          ./gradlew :pbandk-runtime:generateWellKnownTypes \
            :pbandk-runtime:generateTestTypes \
            :protoc-gen-pbandk:protoc-gen-pbandk-lib:generateProto \
            :conformance:conformance-lib:generateProto
          if [ -n "$(git status --porcelain)" ]; then
            echo "::error::Found uncommitted changes to bundled types"
            git status
            exit 1
          else
            exit 0
          fi

      - name: Publish artifacts to local maven repository
        run: |
          if [ "${{ matrix.os-type }}" == "linux" ]; then
            ./gradlew publishToMavenLocal
          else
            ./gradlew publishIosArm64PublicationToMavenLocal \
                    publishIosX64PublicationToMavenLocal \
                    publishMacosArm64PublicationToMavenLocal \
                    publishMacosX64PublicationToMavenLocal
          fi
          echo "Published files:"
          find $HOME/.m2/repository -type f

      - name: Upload maven artifacts
        uses: actions/upload-artifact@v2
        with:
          name: maven-artifacts-${{ matrix.os-type }}
          path: ~/.m2/repository

      - name: Build conformance test suite
        run: |
          if [ "${{ matrix.os-type }}" == "linux" ]; then
            ./gradlew \
              :conformance:conformance-lib:assemble \
              :conformance:conformance-jvm:installDist \
              :conformance:conformance-native:build
          else
            ./gradlew :conformance:conformance-native:build
          fi

      - name: Package files necessary to run conformance tests
        run: |
          if [ "${{ matrix.os-type }}" == "linux" ]; then
            tar -cvf conformance-test-files-${{ matrix.os-type }}.tar \
              conformance/test-conformance.sh \
              conformance/jvm/build/install/conformance \
              conformance/jvm/failing_tests.txt \
              build/js \
              conformance/js/failing_tests.txt \
              conformance/js/run.sh \
              conformance/native/build/bin/linux/conformanceReleaseExecutable/conformance.kexe \
              conformance/native/failing_tests.txt
          else
            tar -cvf conformance-test-files-${{ matrix.os-type }}.tar \
              conformance/test-conformance.sh \
              conformance/native/build/bin/macos/conformanceReleaseExecutable/conformance.kexe \
              conformance/native/failing_tests.txt
          fi

      - name: Upload files necessary to run conformance tests
        uses: actions/upload-artifact@v2
        with:
          name: conformance-test-files-${{ matrix.os-type }}
          path: conformance-test-files-${{ matrix.os-type }}.tar

      - name: Bundle the build report
        if: failure()
        run: find . -type d -name 'reports' | zip -@ -r build-reports-${{ matrix.os-type }}.zip

      - name: Upload the build report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: error-report-${{ matrix.os-type }}
          path: build-reports-${{ matrix.os-type }}.zip

  build-conformance-test-runner:
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            os-type: linux
          - os: macos-10.15
            os-type: macos
      fail-fast: false
    name: Build conformance test runner (${{ matrix.os-type }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cache protobuf conformance-test-runner ${{ env.PROTOBUF_CONFORMANCE_VERSION }}
        uses: actions/cache@v2
        id: cache-protobuf
        with:
          path: ~/protobuf
          key: ${{ runner.os }}-protobuf-${{ env.PROTOBUF_CONFORMANCE_VERSION }}

      - name: Build protobuf conformance-test-runner
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          cd ~
          curl -sSLO https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOBUF_CONFORMANCE_VERSION }}/protobuf-all-${{ env.PROTOBUF_CONFORMANCE_VERSION }}.tar.gz
          tar xzvf protobuf-all-${{ env.PROTOBUF_CONFORMANCE_VERSION }}.tar.gz
          mv protobuf-${{ env.PROTOBUF_CONFORMANCE_VERSION }} protobuf
          cd protobuf
          ./configure
          make
          cd conformance
          make

  conformance:
    needs: [build, build-conformance-test-runner]
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            os-type: linux
            platform: jvm
          - os: ubuntu-18.04
            os-type: linux
            platform: js
          - os: ubuntu-18.04
            os-type: linux
            platform: linux
          - os: macos-10.15
            os-type: macos
            platform: macos
      fail-fast: false
    name: Conformance tests (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Java ${{ env.JAVA_VERSION }}
        if: matrix.platform == 'jvm'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install Node.js ${{ env.NODEJS_VERSION }}
        if: matrix.platform == 'js'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Cache protobuf conformance-test-runner ${{ env.PROTOBUF_CONFORMANCE_VERSION }}
        uses: actions/cache@v2
        with:
          path: ~/protobuf
          key: ${{ runner.os }}-protobuf-${{ env.PROTOBUF_CONFORMANCE_VERSION }}

      - name: Download conformance test files
        uses: actions/download-artifact@v2
        with:
          name: conformance-test-files-${{ matrix.os-type }}

      - name: Extract conformance test files
        run: tar -xvf conformance-test-files-${{ matrix.os-type }}.tar

      - name: Run ${{ matrix.platform }} conformance tests
        run: |
          export CONF_TEST_PATH=~/protobuf/conformance/conformance-test-runner
          ./conformance/test-conformance.sh ${{ matrix.platform }}

  build-examples:
    needs: build
    name: Build examples
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Download maven artifacts
        uses: actions/download-artifact@v2
        with:
          name: maven-artifacts-linux
          path: ~/.m2/repository

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-examples-${{ hashFiles('examples/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-examples-

      - name: Install Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build all examples
        run: |
          for d in examples/*; do
            set -e
            [ -d "$d" ] || continue
            echo "::group::Build $d"
            pushd "$d" >/dev/null
            ../../gradlew build
            popd >/dev/null
            echo "::endgroup::"
          done

  create-staging-repository:
    needs: [build, conformance, build-examples]
    # Only tagged versions get staged for release to Maven Central. All other builds only get published to the
    # snapshot repository.
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Create staging repository
    runs-on: ubuntu-18.04
    outputs:
      repository_id: ${{ steps.create.outputs.repository_id }}
    steps:
      - id: create
        uses: nexus-actions/create-nexus-staging-repo@v1.1
        with:
          username: ${{ secrets.SONATYPE_API_USER }}
          password: ${{ secrets.SONATYPE_API_KEY }}
          staging_profile_id: ${{ env.SONATYPE_STAGING_PROFILE_ID }}
          base_url: ${{ env.SONATYPE_BASE_URL }}
          description: "${{ github.workflow }} #${{ github.run_number }} (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

  publish:
    needs: [build, conformance, build-examples, create-staging-repository]
    # TODO: There's gotta be a better way :(
    if: ${{ success() || (needs.create-staging-repository.result == 'skipped' && needs.build.result == 'success' && needs.conformance.result == 'success' && needs.build-examples.result == 'success') }}
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            os-type: linux
          - os: macos-10.15
            os-type: macos
      fail-fast: false
    name: Publish (${{ matrix.os-type }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      # This will publish to the OSSRH Snapshot repository rather than Maven Central if the version
      # name ends with -SNAPSHOT.
      - name: Publish to Maven Central
        env:
          SIGNING_KEY_ASCII_ARMORED: ${{ secrets.SIGNING_KEY_ASCII_ARMORED }}
          SONATYPE_API_USER: ${{ secrets.SONATYPE_API_USER }}
          SONATYPE_API_KEY: ${{ secrets.SONATYPE_API_KEY }}
          SONATYPE_REPOSITORY_ID: ${{ needs.create-staging-repository.outputs.repository_id }}
        run: |
          if [ "${{ matrix.os-type }}" == "linux" ]; then
            ./gradlew clean publishAllPublicationsToSonatypeRepository
          else
            ./gradlew clean \
                    publishIosArm64PublicationToSonatype \
                    publishIosX64PublicationToSonatype \
                    publishMacosArm64PublicationToSonatype \
                    publishMacosX64PublicationToSonatype
          fi

  finalize-staging-repository:
    needs: [create-staging-repository, publish]
    if: ${{ always() && needs.create-staging-repository.result == 'success' }}
    name: Finalize staging repository
    runs-on: ubuntu-18.04

    steps:
      - name: Discard
        if: ${{ needs.publish.result != 'success' }}
        uses: nexus-actions/drop-nexus-staging-repo@v1
        with:
          username: ${{ secrets.SONATYPE_API_USER }}
          password: ${{ secrets.SONATYPE_API_KEY }}
          staging_repository_id: ${{ needs.create-staging-repository.outputs.repository_id }}
          base_url: ${{ env.SONATYPE_BASE_URL }}
      - name: Release
        if: ${{ needs.publish.result == 'success' }}
        uses: nexus-actions/release-nexus-staging-repo@v1
        with:
          username: ${{ secrets.SONATYPE_API_USER }}
          password: ${{ secrets.SONATYPE_API_KEY }}
          staging_repository_id: ${{ needs.create-staging-repository.outputs.repository_id }}
          base_url: ${{ env.SONATYPE_BASE_URL }}
